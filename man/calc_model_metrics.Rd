% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_model_metrics.R
\name{calc_model_metrics}
\alias{calc_model_metrics}
\title{Train caret model and extract model results}
\usage{
calc_model_metrics(
  x.train,
  y.train,
  x.test,
  y.test,
  train.method = "glmnet",
  summaryFunction = twoClassSummary,
  savePredictions = TRUE,
  returnResamp = "all",
  classProbs = TRUE,
  cv.method = "repeatedcv",
  number = 10,
  repeats = 5,
  metric = "ROC",
  direction = ">",
  levels = c("no", "yes"),
  preProcess = c("center", "scale"),
  tuneGrid = NULL,
  ...
)
}
\arguments{
\item{x.train}{subset of data used for training.}

\item{y.train}{outcome variable used to compare predictions obtained with the trained model. Data has to split the same way as x.train. Data needs to be encoded in a specific way: 0 = no event, 1 = event or a respective factor that uses the control data as the first factor.
Preferred ways of splitting are the \code{\link[=createMultiFolds]{createMultiFolds()}} and \code{\link[=createFolds]{createFolds()}} functions included in the \pkg{caret} package.}

\item{x.test}{subset of data model is applied to, to test performance.}

\item{y.test}{outcome variable corresponding to the x.test split.}

\item{train.method}{A string specifying which classification or regression model to use. Possible values are found using names(caret::getModelInfo())}

\item{summaryFunction}{a function to compute performance metrics across
resamples. The arguments to the function should be the same as those in
\code{\link[caret]{defaultSummary}}. Note that if \code{method = "oob"} is used, 
this option is ignored and a warning is issued.}

\item{savePredictions}{an indicator of how much of the hold-out predictions
for each resample should be saved. Values can be either \code{"all"},
\code{"final"}, or \code{"none"}. A logical value can also be used that
convert to \code{"all"} (for true) or \code{"none"} (for false).
\code{"final"} saves the predictions for the optimal tuning parameters.}

\item{returnResamp}{A character string indicating how much of the resampled
summary metrics should be saved. Values can be \code{"final"}, \code{"all"}
or \code{"none"}}

\item{classProbs}{a logical; should class probabilities be computed for
classification models (along with predicted values) in each resample?}

\item{cv.method}{The resampling method: "boot", "boot632", "optimism_boot", "boot_all", "cv", "repeatedcv", "LOOCV", "LGOCV" (for repeated training/test splits), "none" (only fits one model to the entire training set), "oob" (only for random forest, bagged trees, bagged earth, bagged flexible discriminant analysis, or conditional tree forest models), timeslice, "adaptive_cv", "adaptive_boot" or "adaptive_LGOCV"}

\item{number}{Either the number of folds or number of resampling iterations}

\item{repeats}{For repeated k-fold cross-validation only: the number of
complete sets of folds to compute}

\item{metric}{A string that specifies what summary metric will
be used to select the optimal model. By default, possible values
are "RMSE" and "Rsquared" for regression and "Accuracy" and
"Kappa" for classification. If custom performance metrics are
used (via the \code{summaryFunction} argument in
\code{\link[caret]{trainControl}}, the value of \code{metric} should
match one of the arguments. If it does not, a warning is issued
and the first metric given by the \code{summaryFunction} is
used. (NOTE: If given, this argument must be named.)}

\item{direction}{in which direction to make the comparison?
    \dQuote{auto} (default): automatically define in which group the
    median is higher and take the direction accordingly.
    \dQuote{>}: if the predictor values for the control group are
    higher than the values of the case group (controls > t >= cases).
    \dQuote{<}: if the predictor values for the control group are lower
    or equal than the values of the case group (controls < t <= cases).
    You should set this explicity to \dQuote{>} or \dQuote{<} whenever
    you are resampling or randomizing the data, otherwise the 
    curves will be biased towards higher AUC values.
  }

\item{levels}{the value of the response for controls and cases
    respectively. By default, the first two values of
    \code{levels(as.factor(response))} are taken, and the remaining levels are ignored.
    It usually captures two-class factor data correctly, but will
    frequently fail for other data types (response factor with more than 2 levels,
    or for example if your response is coded \dQuote{controls} and \dQuote{cases},
    the levels will be inverted) and must then be specified here.
    If your data is coded as \code{0} and \code{1} with \code{0}
    being the controls, you can safely omit this argument.
  }

\item{preProcess}{A string vector that defines a pre-processing
of the predictor data. Current possibilities are "BoxCox",
"YeoJohnson", "expoTrans", "center", "scale", "range",
"knnImpute", "bagImpute", "medianImpute", "pca", "ica" and
"spatialSign". The default is no pre-processing. See
\code{\link[caret]{preProcess}} and \code{\link[caret]{trainControl}} on the
procedures and how to adjust them. Pre-processing code is only
designed to work when \code{x} is a simple matrix or data frame.}

\item{tuneGrid}{A data frame with possible tuning values. The
columns are named the same as the tuning parameters. Use
\code{\link[caret]{getModelInfo}} to get a list of tuning parameters
for each model or see
\url{http://topepo.github.io/caret/available-models.html}.
(NOTE: If given, this argument must be named.)}

\item{...}{additional parameters passed on to \code{\link[caret:train]{caret::train()}} function.}
}
\description{
This function trains a model using the trainControl and train function included in \pkg{caret}. Afterwards several metrics are extracted and stored in a list.
Stored objects are metrics obtained in the training process (ROC or Accuracy, Hyperparameters, etc.), coefficients of the trained model,
results of the cross validation process, predictions on a test set which should be defined with the \code{\link[caret:createDataPartition]{caret::createMultiFolds()}} function. Accepted train methods are the methods
listed in the \pkg{caret} documentation.
}
